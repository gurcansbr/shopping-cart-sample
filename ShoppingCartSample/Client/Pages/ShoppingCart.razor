@page "/shoppingcart"
@inject Blazor.Extensions.Storage.LocalStorage Storage
@inject NavigationManager NavigationManager

<h3>Shopping Cart</h3>

<div class="container mb-4">
    @if (!string.IsNullOrEmpty(Message))
    {
        <Messages Message="@Message" Type="@type" />
    }
    <div class="row">
        <div class="col-12">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th scope="col"> </th>
                            <th scope="col">Product</th>
                            <th scope="col">Available</th>
                            <th scope="col" class="text-center">Quantity</th>
                            <th scope="col" class="text-right">Price</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (cart != null)
                        {
                            @foreach (CartLine cartItem in cart.Products)
                            {
                                <tr>
                                    <td><img src="https://dummyimage.com/50x50/55595c/fff" /> </td>
                                    <td>@cartItem.Product.Title</td>
                                    <td>In stock</td>
                                    <td><input class="form-control" type="number" value="@cartItem.Quantity" @oninput="@((e) => UpdateCart(cartItem, Convert.ToInt32(e.Value)))" /></td>
                                    <td class="text-right">@cartItem.Product.Price</td>
                                    <td class="text-right"><button @onclick="@(() => RemoveById(cartItem.Product))" class="btn btn-sm btn-danger"><i class="fa fa-trash"></i></button></td>
                                </tr>
                            }
                        }
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td><strong>Total</strong></td>
                            <td class="text-right"><strong>@total</strong></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col mb-2">
            <div class="row">
                <div class="col-sm-12  col-md-6">
                    <button class="btn btn-block btn-light" @onclick="@ContinueShopping">Continue Shopping</button>
                </div>
                <div class="col-sm-12 col-md-6 text-right">
                    <button type="button" class="btn btn-block btn-success text-uppercase">Checkout</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    Cart cart;
    double total = 0;
    string Message = "";
    string type = "";

    // on render of page
    protected override async Task OnInitializedAsync()
    {
        cart = await Storage.GetItem<Cart>("Cart");
        if (cart == null)
        {
            cart = new Cart
            {
                Products = new List<CartLine>(),
            };
            await Storage.SetItem("Cart", cart);
        }
        total = cart.Products.Sum(c => c.Product.Price * c.Quantity);
    }

    // remove item from shopping cart
    async Task RemoveById(Product product)
    {
        //cart = await Storage.GetItem<Cart>("Cart");
        cart.Products.RemoveAll(c => c.Product.ProductId == product.ProductId);
        await Storage.SetItem<Cart>("Cart", cart);
        total = cart.Products.Sum(c => c.Product.Price * c.Quantity);
        Message = product.Title + " removed from your shopping cart";
        type = "danger";
    }

    async Task UpdateCart(CartLine cartItem, int quantity)
    {
        if(quantity > cartItem.Product.Stock)
        {
            Message = "There is no avaiable stock for " + cartItem.Product.Title;
            type = "danger";
            return;
        }

        var item = cart.Products.FirstOrDefault(c => c.Product.ProductId == cartItem.Product.ProductId);
        if (item != null)
        {
            if(quantity > 0)
            {
                item.Quantity = quantity;
                Message = cartItem.Product.Title + " quantity updated";
                type = "info";
            }
            else
            {
                cart.Products.Remove(cartItem);
                Message = cartItem.Product.Title + " was removed from your cart";
                type = "danger";
            }

            total = cart.Products.Sum(c => c.Product.Price * c.Quantity);
            await Storage.SetItem<Cart>("Cart", cart);
        }
    }

    void ContinueShopping()
    {
        NavigationManager.NavigateTo("/");
    }
}
